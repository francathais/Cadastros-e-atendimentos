# -*- coding: utf-8 -*-
"""População-ubs

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tB75wf7MSbiknvqqL2WIaxAaoxgPyNQF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar os dados de cadastros (arquivo .xlsx)
cadastros = pd.read_excel("/content/cadastrados_Unidade Einstein 2023.xlsx")

# Carregar os dados de atendimentos (arquivo .xlsx)
atendimentos = pd.read_excel('/content/atendidos_UNIDADE Einstein 2023.xlsx')

"""CADASTROS"""

cadastros

cadastros.columns.tolist()

# Função para calcular a porcentagem de cada valor único em uma coluna
def calcular_porcentagem(df, coluna):
    porcentagem = df[coluna].value_counts(normalize=True) * 100
    return porcentagem

# Calcular a porcentagem para RACA_COR
porcentagem_raca_cor = calcular_porcentagem(cadastros, "RACA_COR")
print("Porcentagem por Raça/Cor:")
print(porcentagem_raca_cor)

# Calcular a porcentagem para SEXO
porcentagem_sexo = calcular_porcentagem(cadastros, "SEXO")
print("\nPorcentagem por Sexo:")
print(porcentagem_sexo)

# Criar listas de IDs para "SIM" e "NAO" em cada condição

# DIABETES
diabetes_sim = cadastros[cadastros['DIABETES'] == 'SIM']['ID'].tolist()
diabetes_nao = cadastros[cadastros['DIABETES'] == 'NAO']['ID'].tolist()

# HIPERTENSAO_ARTERIAL
hipertensao_sim = cadastros[cadastros['HIPERTENSAO_ARTERIAL'] == 'SIM']['ID'].tolist()
hipertensao_nao = cadastros[cadastros['HIPERTENSAO_ARTERIAL'] == 'NAO']['ID'].tolist()

# USO_ALCOOL
uso_alcool_sim = cadastros[cadastros['USO_ALCOOL'] == 'SIM']['ID'].tolist()
uso_alcool_nao = cadastros[cadastros['USO_ALCOOL'] == 'NAO']['ID'].tolist()

# FUMANTE
fumante_sim = cadastros[cadastros['FUMANTE'] == 'SIM']['ID'].tolist()
fumante_nao = cadastros[cadastros['FUMANTE'] == 'NAO']['ID'].tolist()

# Exibir os tamanhos das listas como exemplo
print(f"DIABETES SIM: {len(diabetes_sim)}, NAO: {len(diabetes_nao)}")
print(f"HIPERTENSAO_ARTERIAL SIM: {len(hipertensao_sim)}, NAO: {len(hipertensao_nao)}")
print(f"USO_ALCOOL SIM: {len(uso_alcool_sim)}, NAO: {len(uso_alcool_nao)}")
print(f"FUMANTE SIM: {len(fumante_sim)}, NAO: {len(fumante_nao)}")

# Criar uma distribuição norma
# Configurações estéticas do Seaborn
sns.set(style="whitegrid")

# Calcular a idade a partir da data de nascimento
cadastros['data_nascimento'] = pd.to_datetime(cadastros['data_nascimento'])
cadastros['idade'] = (pd.to_datetime('now') - cadastros['data_nascimento']).astype('<m8[Y]')

# Filtrar os dados para hipertensão arterial 'SIM'
dados_hipertensao_sim = cadastros[cadastros['hipertensao_arterial'] == 'SIM']

# Criar o gráfico de distribuição normal
plt.figure(figsize=(10, 6))
sns.kdeplot(data=dados_hipertensao_sim, x='idade', fill=True)  
plt.title("Distribuição Normal da Idade para Hipertensão Arterial 'SIM'")
plt.xlabel("Idade")
plt.ylabel("Densidade")

# Calcular média e desvio padrão
media = dados_hipertensao_sim['idade'].mean()
desvio_padrao = dados_hipertensao_sim['idade'].std()

# Adicionar informações no gráfico
plt.axvline(media, color='red', linestyle='dashed', linewidth=1, label=f'Média: {media:.2f}')
plt.axvline(media + desvio_padrao, color='green', linestyle='dashed', linewidth=1, label=f'Média + Desvio Padrão')
plt.axvline(media - desvio_padrao, color='green', linestyle='dashed', linewidth=1, label=f'Média - Desvio Padrão')
plt.legend()

plt.show()


"""ATENDIMENTO"""

Atendiemntos

# Análises com porcentagem
# 1. Contagem e porcentagem de atendimentos por categoria profissional
contagem_categoria = atendimentos['CATEGORIA_PROFISSIONAL'].value_counts()
porcentagem_categoria = (contagem_categoria / contagem_categoria.sum()) * 100

# 2. Distribuição e porcentagem dos atendimentos por raça/cor e sexo do paciente
distribuicao_raca_sexo = atendimentos.groupby(['RACA_COR_PACIENTE', 'SEXO_PACIENTE']).size().unstack()
porcentagem_raca_sexo = (distribuicao_raca_sexo.div(distribuicao_raca_sexo.sum(axis=0), axis=1)) * 100

# 3. Quantidade e porcentagem de atendimentos por procedimento
contagem_procedimentos = atendimentos['PROCEDIMENTO'].value_counts()
porcentagem_procedimentos = (contagem_procedimentos / contagem_procedimentos.sum()) * 100

# Exibir os resultados das análises com porcentagem
print("Contagem e porcentagem de atendimentos por categoria profissional:")
print(pd.concat([contagem_categoria, porcentagem_categoria], axis=1, keys=['Contagem', 'Porcentagem']))

print("\nDistribuição e porcentagem dos atendimentos por raça/cor e sexo do paciente:")
print(porcentagem_raca_sexo)

print("\nQuantidade e porcentagem de atendimentos por procedimento:")
print(pd.concat([contagem_procedimentos, porcentagem_procedimentos], axis=1, keys=['Contagem', 'Porcentagem']))

"""ANALISANDO CADASTRO E ATENDIMENTO

Analise da distribuição de procedimentos realizados (do dataframe "Atendidos") em relação às condições de saúde dos pacientes (informação disponível no dataframe "Cadastros").Cruzar os dados: Vincular os dataframes "Cadastros" e "Atendidos" pelo identificador único, permitindo analisar as condições de saúde dos pacientes em relação aos procedimentos que realizaram.
Análise focada: Identificar os tipos mais comuns de procedimentos realizados e relacioná-los com as condições de saúde mais prevalentes entre esses pacientes.
"""

import pandas as pd

# Supondo que os DataFrames 'cadastros' e 'atendimentos' já foram carregados e mesclados corretamente em 'dados_combinados'
# ...

# Contagem dos procedimentos mais comuns
procedimentos_comuns = dados_combinados['PROCEDIMENTO'].value_counts().head(10)
print("Procedimentos mais comuns:")
print(procedimentos_comuns)

# Atualizamos a lista com os nomes das colunas corretos, em maiúsculas
condicoes_foco = ['DIABETES', 'HIPERTENSAO_ARTERIAL', 'CANCER']

# Agrupar por procedimento e calcular a porcentagem de pacientes com cada condição para os 10 procedimentos mais comuns
analise_procedimentos_condicoes = dados_combinados.groupby('PROCEDIMENTO')[condicoes_foco].apply(lambda x: (x == 'SIM').mean() * 100).nlargest(10, 'DIABETES')

print("\nAnálise dos procedimentos mais comuns em relação às condições de saúde focadas:")
print(analise_procedimentos_condicoes)

"""Condições de Saúde e Procedimentos
Focando nas condições de saúde 'DIABETES', 'HIPERTENSAO_ARTERIAL', e 'CANCER', a análise dos 10 procedimentos mais comuns revela que:

Diabetes: Tem maior prevalência entre os pacientes que realizam o procedimento "Radiografia Periapical", com aproximadamente 16.67% dos pacientes atendidos tendo esta condição. Isso pode sugerir uma atenção particular à saúde bucal em pacientes diabéticos.
Hipertensão Arterial: Observa-se uma porcentagem significativa de pacientes hipertensos em procedimentos como "Consulta de Profissionais de Nível Superior na Atenção Primária", onde cerca de 25.83% dos pacientes apresentam esta condição. Isso reflete a importância de acompanhamento contínuo para pessoas com hipertensão.
Câncer: Não houve uma porcentagem significativa de pacientes com câncer nos 10 procedimentos mais comuns analisados, sugerindo que os procedimentos específicos para esta condição podem não estar entre os mais frequentes neste conjunto de dados.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Preparando os dados para visualização
dados_visuais = analise_procedimentos_condicoes['DIABETES'].sort_values(ascending=False)

# Configurando o gráfico
plt.figure(figsize=(10, 6))
sns.barplot(x=dados_visuais.values, y=dados_visuais.index, palette="Blues_d")
plt.title('Porcentagem de Pacientes com Diabetes por Procedimento')
plt.xlabel('Porcentagem de Pacientes com Diabetes')
plt.ylabel('Procedimento')

# Mostrando o gráfico
plt.tight_layout()
plt.show()
